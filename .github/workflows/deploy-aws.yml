name: prueba

on:
  push:
    branches:
      - main
      - staging
      - development

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: optimized-app
  IMAGE_TAG: ${{github.run_number}}
  
jobs:
  build: 
    name: Build and push Docker image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: set Image tag based on branch
      
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "IMAGE_TAG=main-${{ github.run_number }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "IMAGE_TAG=staging-${{ github.run_number }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/development" ]; then
            echo "IMAGE_TAG=development-${{ github.run_number }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV
          fi

      - name: Build image to Amazon ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
     
      - name: Tag image for ECR
        run: |
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:$IMAGE_TAG

      - name: Push images to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:$IMAGE_TAG
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:$IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  deploy-dev:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    steps:
      - name: Deployar en development
        run: echo "Desplegando en el entorno de development ${IMAGE_URI}"

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Deployar en staging
        run: echo "Desplegando en el entorno de staging ${IMAGE_URI}"

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deployar en produccion
        run: echo "Desplegando en el entorno de produccion ${IMAGE_URI}"
      
      - name: simulate failure
        run: exit 1
      
      - name: Rollback en caso de fallo
        if: failure()
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ejecutar rollback
        if: failure()
        run: |
          PREVIOUS_TAG=$(aws ecr list-images \
            --repository-name $ECR_REPOSITORY \
            --query "reverse(sort_by(imageIds[?starts_with(imageTag, 'main-')], &imageTag))[*].imageTag" \
            --output text | awk '{print $2}')

          echo "Revirtiendo a versión: $PREVIOUS_TAG"
          docker pull ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:$PREVIOUS_TAG
          docker tag ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:$PREVIOUS_TAG \
                     ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest

      - name: Notificación post-rollback
        if: failure()
        run: echo "✅ Rollback completado correctamente a la versión anterior: $PREVIOUS_TAG"
